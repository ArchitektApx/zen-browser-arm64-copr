name: Sync Twilight Release
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      needs_update: ${{ steps.check-version.outputs.needs_update }}
    steps:
      - uses: actions/checkout@v4

      - name: check for new upstream version
        id: check-version
        run: |
          # get verrsion from zen-browser-twilight.spec 
          LOCAL_VER=$(grep -oP 'Version:\s*\K.*' zen-browser-twilight.spec)
          
          # get latest pre-release version from github, we have to extract the build version from the name as the tag is just "twilight"
          # name is like "Twilight build - 1.0.1-t.20 (2024-11-24 at 20:15:17)"
          TWILIGTH=$(curl -s https://api.github.com/repos/zen-browser/desktop/releases | jq -r 'map(select(.prerelease)) | first | .name')
          TWILIGHT_VER=$(echo $TWILIGTH | grep -oP 'Twilight build - \K.*(?= \()')
          TWILIGHT_VER_SPEC=$(echo $TWILIGHT_VER | sed 's@-@.@g')

          # check if new version is available and new version starts with a digit
          NEEDS_UPDATE=false
          echo "Current version: $LOCAL_VER"
          # check if the version is different and if the new version matches the pattern of a version number
          if [ "$LOCAL_VER" != "TWILIGHT_VER_SPEC" ] && [[ $TWILIGHT_VER_SPEC =~ ^[0-9] ]]; then
            echo "New version available: $TWILIGHT_VER_SPEC"
            NEEDS_UPDATE=true
          else
            echo "No new version available"
          fi

          # write output so next steps can use it to skip if no new version
          echo "TWILIGHT_VER=$TWILIGHT_VER" >> $GITHUB_ENV
          echo "TWILIGHT_VER_SPEC=$TWILIGHT_VER_SPEC" >> $GITHUB_ENV
          echo "needs_update=$NEEDS_UPDATE" >> $GITHUB_OUTPUT

      - name: Setup git bot
        if: steps.check-version.outputs.needs_update == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Update zen-browser-twilight.spec
        if: steps.check-version.outputs.needs_update == 'true'
        run: |
          # update spec file version and url
          sed -i '0,/Version:.*/s//Version:            '$TWILIGHT_VER_SPEC'/' zen-browser-twilight.spec

          COMMIT_MSG="Update to twilight $TWILIGHT_VER"
          # get current changelog from spec file (everything after %changelog)
          CHANGELOG="$(sed -n '/%changelog/,$p' zen-browser-twilight.spec | sed '1d')"

          # create new changelog line with current date and commit messag
          NEW_CHANGELOG=$(echo -e "* $(date +'%a %b %d %Y') ArchitektApx <architektapx@gehinors.ch> - $TWILIGHT_VER_SPEC\n- $COMMIT_MSG\n\n$CHANGELOG")

          # replace old changelog with new one
          sed -i '/%changelog/,$d' zen-browser-twilight.spec
          echo -e "%changelog\n$NEW_CHANGELOG" >> zen-browser-twilight.spec
          git add zen-browser-twilight.spec

      - name: commit and tag new version
        if: steps.check-version.outputs.needs_update == 'true'
        id: commit-update
        run: |
          git commit -m "chore(zen-browser-twilight): Sync twilight spec to $TWILIGHT_VER_SPEC"
          git push 

          # get commit sha for later use
          echo "commit-id=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT