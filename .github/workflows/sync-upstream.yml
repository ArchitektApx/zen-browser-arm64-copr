# Controls when the workflow will run
on:
  schedule:
    - cron: '*/30 * * * *'

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install jq
        run: sudo apt-get install jq

      - name: check for new upstream version
        id: check-version
        run: |
          LOCAL_VER=$(git submodule status desktop | awk '{print $1}' | cut -c2-)
          UPSTREAM_VER=$(curl -s https://api.github.com/repos/zen-browser/desktop/releases/latest | jq -r '.tag_name' | select(test("^[0-9]")))

          if [ "$LOCAL_VER" != "$UPSTREAM_VER" ]; then
            echo "New version available: $UPSTREAM_VER"
            echo "LOCAL_VER=$LOCAL_VER" >> $GITHUB_ENV
            echo "UPSTREAM_VER=$UPSTREAM_VER" >> $GITHUB_ENV
          else
            echo "No new version available 
          fi

          # write output so next steps can use it to skip if no new version
          echo "ZEN_VER=$UPSTREAM_VER" >> $GITHUB_ENV
          echo "::set-output name=needs_update::$(test $LOCAL_VER != $UPSTREAM_VER)"
          echo "::set-output name=zen_ver::$UPSTREAM_VER"

      - name: Update desktop submodule to new version tag
        if: steps.check-version.outputs.needs_update == 'true'
        run: |
          git submodule update --recursive
          cd desktop
          git checkout $ZEN_VER

      - name: Update zen-browser.spec
        if: steps.check-version.outputs.needs_update == 'true'
        run: |
          # format version for spec file
          ZEN_VER_SPEC=$(echo $ZEN_VER | sed 's@-@.@g')
          # update spec file version and url
          sed -i '0,/Version:.*/s//Version:            '$ZEN_VER_SPEC'/' zen-browser.spec
          sed -i 's@https://github.com/ArchitektApx/zen-browser-arm64-copr/releases/download/.*@https://github.com/ArchitektApx/zen-browser-arm64-copr/releases/download/'$ZEN_VER'/zen.linux-generic.tar.bz2@g' zen-browser.spec
  
          # get upstream commit message
          cd desktop
          COMMIT_MSG="Upstream: $(git log -1 --pretty=%B)"
          cd ..

          # get current changelog from spec file (everything after %changelog)
          CHANGELOG="$(sed -n '/%changelog/,$p' zen-browser.spec | sed '1d')"

          # create new changelog line with current date and commit messag
          NEW_CHANGELOG=$(echo -e "* $(date +'%a %b %d %Y') ArchitektApx <ArchitektApx@users.noreply.github.com> - $ZEN_VER_SPEC\n- $COMMIT_MSG\n\n$CHANGELOG")

          # replace old changelog with new one
          sed -i '/%changelog/,$d' zen-browser.spec
          echo -e "%changelog\n$NEW_CHANGELOG" >> zen-browser.spec


      - name: Setup git bot
        if: steps.check-version.outputs.needs_update == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: commit and tag new version
        if: steps.check-version.outputs.needs_update == 'true'
        run: |
          git add . 
          git commit -m "chore(zen-browser): Sync Zen-Browser version"
          git tag $ZEN_VER
          git push 
          git push --tags

      - name: call build workflow
        if: steps.check-version.outputs.needs_update == 'true'
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.actions.createWorkflowDispatch({
              workflow_file: '.github/workflows/build-arm64.yml',
              ref: 'main',
              inputs: {
                build-version: ${{ steps.check-version.outputs.zen_ver }},
                build-channel: 'zen',
                publish: 'true'
              }
            })
